# targets: # Target group that builders are applied
#   $default:  # At least one target should use the package name, 
#              # and in lieu of that, you can define the default behavior using $default.
#     builders:  # Declare the builders to be applied to the current target (builders defined below).
#       copy_generator|copyBuilder:  # Set as $packageName|$builderName
#         generate_for:  # Files to which the builder will be applied, using a glob pattern.
#           - lib/*  
#         enabled: True # Whether the builder will be applied or not. If not defined, it follows the auto_apply attribute of the builder. 
#       # options: declare BuilderOptions
#         options:
#           author: 'John Doe'  # Author name
  
# builders:  # Declare Builder
#   copyBuilder:  # The name of builder is `copyBuilder`.
#     import: 'package:copy_generator/copy_generator.dart'  # The URI that needs to be imported for the builder to run.
#     builder_factories: [ 'copyBuilder' ]  # Top-level Builder creation functions that can be brought in from the import.
#     build_extensions:  # List of extensions for the inputs related to the outputs produced by the Builder.
#       .txt:  
#         - .copy.txt  
#     build_to: source  # source (creates output right next to input) | cache (cache directory)
#     auto_apply: dependents # none | dependents (applied to direct dependency) | all_packages | root_package

targets:  
  $default:  
    builders:  
      
      copy_generator|topLevelNamesBuilder:  
        generate_for:  
          - lib/examples/*.dart  
        enabled: True  
      
      # class builder
      copy_generator|classBuilder:  
        generate_for:  
          - lib/examples/*.dart  
        enabled: True  
        options:
          output: 'lib/output'
# copy builder
      copy_generator|copyBuilder:  
        generate_for:  
          - lib/*.txt  
        enabled: True  
        options:
          author: 'Taas Ekpaye'
          output: 'lib/output'

      copy_generator|addBuilder:  
        generate_for:  
          - lib/examples/*.dart  
        enabled: True  
        options:
          author: 'Taas Ekpaye'

      copy_generator|multiplierBuilder:  
        generate_for:  
          - lib/examples/*.dart  
        enabled: True  
        options:
          author: 'Taas Ekpaye'
  
builders:  
  # The next builder is `SharedPartBuilder` instances.  
  # Notice they each have  # `build_extensions` set to a `NAME.g.part` file.  
  #    NAME corresponds to the second argument to the SharedPartBuilder ctor.  
  #    `.g.part` is the extension expected of SharedPartBuilder.  
  # `build_to: cache` - the output is not put directly into the project  
  # `applies_builders` - uses the `combining_builder` from `source_gen` to  
  #   combine the parts from each builder into one part file.  
  copyBuilder:  # The name of builder is `copyBuilder`.
    import: 'package:copy_generator/copy_generator.dart'  # The URI that needs to be imported for the builder to run.
    builder_factories: [ 'copyBuilder' ]  # Top-level Builder creation functions that can be brought in from the import.
    build_extensions:  # List of extensions for the inputs related to the outputs produced by the Builder.
      .txt:  
        - .copy.txt  
    build_to: source  # source (creates output right next to input) | cache (cache directory)
    auto_apply: dependents # none | dependents (applied to direct dependency) | all_packages | root_package

  topLevelNamesBuilder:  
    import: 'package:copy_generator/copy_generator.dart'  
    builder_factories: [ 'topLevelNamesBuilder' ]  
    build_extensions: {".dart": ["topLevelNames.g.part"]}  
    auto_apply: dependents  
    build_to: cache  
    applies_builders: ["source_gen|combining_builder"]

  addBuilder:  
    import: 'package:copy_generator/copy_generator.dart'  
    builder_factories: [ 'addBuilder' ]  
    build_extensions: {".dart": [".add.dart"]}  
    auto_apply: dependents  
    build_to: source

  multiplierBuilder:  
    import: 'package:copy_generator/copy_generator.dart'  
    builder_factories: [ 'multiplierBuilder' ]  
    build_extensions: {".dart": ["multiplier.g.part"]}  
    auto_apply: dependents  
    build_to: cache  
    applies_builders: ["source_gen|combining_builder"]


  # classBuilder:  
  #   import: 'package:copy_generator/copy_generator.dart'  
  #   builder_factories: [ 'classBuilder' ]  
  #   build_extensions: {"^lib/{{fileName}}.dart": ["lib/generated/{{fileName}}.dart"]  }
  #   auto_apply: dependents  
  #   build_to: cache  
  #   runs_before: [source_gen|combining_builder]
  #   applies_builders: ["source_gen|combining_builder"]